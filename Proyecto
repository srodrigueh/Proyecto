#include <iostream>
#include <stdlib.h>

using namespace std;

struct nodo {    
  char palabra;
  struct nodo *sgte;
};

struct nodo1 {
  char palabra;       
  string color;
  struct nodo1 *sgte1;
};

struct nodo *pi, *pa, *pf;
struct nodo1 *pi1, *pa1, *pf1;

nodo *lista = NULL;
nodo1 *lista1 = NULL;

void insertarSystem(char dato) {
  if (pi == NULL) {
    pi = new (nodo);
    pi->palabra = dato; 
    pf = pi;
  } else {
    pa = new (nodo);  
    pf->sgte = pa;  
    pa->palabra = dato;
    pf = pa;
  }
  pf->sgte = NULL;
};

void insertarUser(char dato) {
  if (pi1 == NULL) {
    pi1 = new (nodo1);
    pi1->palabra = dato;
    pf1 = pi1;
  } else {
    pa1 = new (nodo1);
    pf1->sgte1 = pa1;
    pa1->palabra = dato;
    pf1 = pa1;
  }
  pf1->sgte1 = NULL;
};

bool buscarLista(nodo *listaUser, char word) {
  bool comparacion = false;
  nodo *actual = new nodo();
  actual = pi;
  while ((actual != NULL)) {
    if (actual->palabra == word) {
      comparacion = true;
    }
    actual = actual->sgte;
  }
  return comparacion;
}

void Comparar() {
  pa1 = pi1; 
  pa = pi;
  while (pa1 != NULL) {
    if (pa1->palabra == pa->palabra) {
      pa1->color = "verde";
      cout << pa1->palabra << " " << pa1->color << endl;
    } else {
      bool busqueda = buscarLista(lista, pa1->palabra);
      if(busqueda == true){
        pa1->color = "Amarillo";
        cout << pa1->palabra << " " << pa1->color << endl;
      }else{
        pa1->color = "Negro";
        cout << pa1->palabra << " " << pa1->color << endl;
      }
    }
    pa1 = pa1->sgte1;
    pa = pa->sgte;
  }
}

void ImprimirError() { 
  pa = pi;
  while (pa != NULL) {
    cout << pa->palabra << " Rojo" << endl;
    pa = pa->sgte;
    }
  }


bool IntentosDelJuego(string, string, int);
int main() {
  int intentos = 0;
  string PalabraDeUsuario;
  bool incorrectword = false;
  bool IntentoFallido = false;
  bool FinJuego = false;
  string BancoDePalabras[6] = {"HOLA", "TELEFONO", "SALARIO", "TIGRE", "DELFIN", "GATO"}; // Th
  srand(time(NULL));
  int a;
  a = 1 + rand() % 6;
  string palabra = BancoDePalabras[rand() % 6];
  cout << "La palabra tiene: " << palabra.length() << " Letras" << endl;
  for (int i = 0; i < palabra.length(); i++) {
    char letra = palabra[i];
    insertarSystem(letra);
  }
  while (FinJuego == false) {
    incorrectword = false;
    intentos = intentos + 1;
    delete pi1;
    std::cout << "Escribe la palabra a adivinar: ";
    std::cin >> PalabraDeUsuario;
    while(incorrectword == false){
    if (PalabraDeUsuario.length() > palabra.length() ||
        PalabraDeUsuario.length() < palabra.length()) {
      FinJuego = false;
      cout << "La palabra es invalida" << endl;
      std::cout << "Escribe la palabra a adivinar: ";
      std::cin >> PalabraDeUsuario;
      incorrectword = false;
    }else{
      incorrectword = true;
    }
    } 
    IntentoFallido = true;
      for (int i = 0; i < PalabraDeUsuario.length(); i++) {
        char letra1 = PalabraDeUsuario[i];
        insertarUser(letra1);
      }
      Comparar();
      FinJuego = IntentosDelJuego(palabra, PalabraDeUsuario, intentos);
  }
}

bool IntentosDelJuego(string palabra, string PalabraDeUsuario, int intentos) {

  string letras[palabra.length()];
  bool FinJuego = false;
  if (palabra == PalabraDeUsuario) {
    cout << "Haz acertado la palabra" << endl;
    cout << "Fin del juego" << endl;
    FinJuego = true;
    return FinJuego;
  } else if (intentos != 6) {
    cout << "No haz acertado, intenta de nuevo" << endl;
    FinJuego = false;
  } else {
    cout << "Se acabaron los intentos" << endl;
    cout << "La palabra era: " << endl;
    ImprimirError();
    cout << "Fin del juego" << endl;
    FinJuego = true;
  }
  return FinJuego;
}
